{"version":3,"sources":["Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","console","log","data","temperature","time","city","cloud","desc","humidity","wind","pressure","weather_icons","className","src","alt","onClick","App","useState","name","setName","setData","fetchData","a","fetch","response","json","useEffect","finalData","current","location","localtime","weather_descriptions","cloudcover","wind_speed","e","target","innerText","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAmFeA,EAjFC,SAAAC,GACdC,QAAQC,IAAIF,GADW,MAYnBA,EAAMG,KATRC,EAHqB,EAGrBA,YACAC,EAJqB,EAIrBA,KACAC,EALqB,EAKrBA,KAEAC,GAPqB,EAMrBC,KANqB,EAOrBD,OACAE,EARqB,EAQrBA,SACAC,EATqB,EASrBA,KACAC,EAVqB,EAUrBA,SACAC,EAXqB,EAWrBA,cAIF,OAFAX,QAAQC,IAAIF,EAAMG,MAClBF,QAAQC,IAAIQ,GAEV,0BAAMG,UAAU,OACd,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,SACb,yBAAKC,IAAI,GAAGC,IAAI,MAElB,yBAAKF,UAAU,QACb,0BAAMA,UAAU,uBACbT,EADH,OACsB,KAEtB,0BAAMS,UAAU,qBACbP,EADH,IACS,6BADT,IACgB,0BAAMO,UAAU,gBAAgBR,IAEhD,8BACE,yBAAKS,IAAKF,EAAeG,IAAI,aAKrC,yBAAKF,UAAU,eACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,gDACA,6BAEA,4BACE,wBAAIG,QAAShB,EAAMgB,SAAnB,SACA,wBAAIA,QAAShB,EAAMgB,SAAnB,UACA,wBAAIA,QAAShB,EAAMgB,SAAnB,SACA,wBAAIA,QAAShB,EAAMgB,SAAnB,YAGJ,yBAAKH,UAAU,sBACb,gDACA,6BAEA,yBAAKA,UAAU,eACb,4BACE,wCACA,wCACA,oCACA,uCAGJ,yBAAKA,UAAU,eACb,4BACE,4BAAKJ,GACL,4BAAKE,GACL,4BAAKD,GACL,4BAAKH,aC7BZU,G,YApCH,WAAO,IAAD,EACQC,mBAAS,SADjB,mBACTC,EADS,KACHC,EADG,OAEQF,mBAAS,MAFjB,mBAETf,EAFS,KAEHkB,EAFG,KAOVC,EAAS,uCAAG,WAAMH,GAAN,eAAAI,EAAA,sEACOC,MAAM,yFAAD,OAC+DL,IAF3E,cACVM,EADU,YAIhBJ,EAJgB,SAIFI,EAASC,OAJP,6EAAH,sDAUf,GAJAC,qBAAU,WACRL,EAAUH,KACT,CAACA,KAEChB,EAAM,OAAO,2CAClB,IAAMyB,EAAY,CAChBxB,YAAaD,EAAK0B,QAAQzB,YAC1BC,KAAMF,EAAK2B,SAASC,UACpBzB,KAAMH,EAAK2B,SAASX,KACpBX,KAAML,EAAK0B,QAAQG,qBACnBzB,MAAOJ,EAAK0B,QAAQI,WACpBtB,SAAUR,EAAK0B,QAAQlB,SACvBF,SAAUN,EAAK0B,QAAQpB,SACvBC,KAAMP,EAAK0B,QAAQK,WACnBtB,cAAeT,EAAK0B,QAAQjB,eAE9B,OACE,6BACE,kBAAC,EAAD,CAAST,KAAMyB,EAAWZ,QA5BT,SAAAmB,GACnBf,EAAQe,EAAEC,OAAOC,WACjBpC,QAAQC,IAAIiB,SCEImB,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9337a0a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = props => {\r\n  console.log(props);\r\n  const {\r\n    temperature,\r\n    time,\r\n    city,\r\n    desc,\r\n    cloud,\r\n    humidity,\r\n    wind,\r\n    pressure,\r\n    weather_icons\r\n  } = props.data;\r\n  console.log(props.data);\r\n  console.log(wind);\r\n  return (\r\n    <main className=\"pre\">\r\n      <div className=\"wrapper pre\">\r\n        <div className=\"col-fl-md-12 pre\">\r\n          <div className=\"wholeWeather pre\">\r\n            <div className=\"col-fl-md-8\">\r\n              <div className=\"singleWeatherImg\">\r\n                <div className=\"image\">\r\n                  <img src=\"\" alt=\"\" />\r\n                </div>\r\n                <div className=\"text\">\r\n                  <span className=\"degree t-weight-900\">\r\n                    {temperature}&#176;{\" \"}\r\n                  </span>\r\n                  <span className=\"city t-weight-300\">\r\n                    {city} <br /> <span className=\"t-weight-100\">{time}</span>\r\n                  </span>\r\n                  <span>\r\n                    <img src={weather_icons} alt=\"icon\" />\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-fl-md-4\">\r\n              <div className=\"singleWeather\">\r\n                <div className=\"countriesList\">\r\n                  <h4>Another Location</h4>\r\n                  <hr />\r\n\r\n                  <ul>\r\n                    <li onClick={props.onClick}>Sanaa</li>\r\n                    <li onClick={props.onClick}>London</li>\r\n                    <li onClick={props.onClick}>Paris</li>\r\n                    <li onClick={props.onClick}>Moscow</li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"weatherListDetails\">\r\n                  <h4>Weather Deatails</h4>\r\n                  <hr />\r\n\r\n                  <div className=\"col-fl-md-7\">\r\n                    <ul>\r\n                      <li>humidity</li>\r\n                      <li>Pressure</li>\r\n                      <li>Wind</li>\r\n                      <li>Cloud</li>\r\n                    </ul>\r\n                  </div>\r\n                  <div className=\"col-fl-md-3\">\r\n                    <ul>\r\n                      <li>{humidity}</li>\r\n                      <li>{pressure}</li>\r\n                      <li>{wind}</li>\r\n                      <li>{cloud}</li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Weather from \"./Weather\";\r\nimport \"./STYLING/kvass.css\";\r\nimport \"./STYLING/style.css\";\r\n\r\nconst App = () => {\r\n  const [name, setName] = useState(\"Sanaa\");\r\n  const [data, setData] = useState(null);\r\n  const handelChange = e => {\r\n    setName(e.target.innerText);\r\n    console.log(name);\r\n  };\r\n  const fetchData = async name => {\r\n    const response = await fetch(\r\n      `http://api.weatherstack.com/current?access_key=0fd8ae9d5247af3922b8324c7aeac035&query=${name}`\r\n    );\r\n    setData(await response.json());\r\n  };\r\n  useEffect(() => {\r\n    fetchData(name);\r\n  }, [name]);\r\n\r\n  if (!data) return <h1>Loading ...</h1>;\r\n  const finalData = {\r\n    temperature: data.current.temperature,\r\n    time: data.location.localtime,\r\n    city: data.location.name,\r\n    desc: data.current.weather_descriptions,\r\n    cloud: data.current.cloudcover,\r\n    pressure: data.current.pressure,\r\n    humidity: data.current.humidity,\r\n    wind: data.current.wind_speed,\r\n    weather_icons: data.current.weather_icons\r\n  };\r\n  return (\r\n    <div>\r\n      <Weather data={finalData} onClick={handelChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}